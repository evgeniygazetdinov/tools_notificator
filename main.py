from dotenv import load_dotenv
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import speech_recognition as sr
from pydub import AudioSegment
import time
from spellchecker import SpellChecker
import re

load_dotenv()

TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Add dictionary for storing recognized texts
recognized_texts = {}

# Initialize spell checking for Russian language
spell = SpellChecker(language='ru')

def correct_spelling(text):
    """Corrects spelling errors in text while preserving punctuation marks"""
    import re
    
    # Regular expression to extract words and punctuation marks
    pattern = r'([^\W\d_]+|\d+|[^\w\s])'
    tokens = re.findall(pattern, text)
    
    corrected_tokens = []
    
    for token in tokens:
        # If it's a punctuation mark or a number, leave it as is
        if not token.isalpha() or len(token) <= 2:
            corrected_tokens.append(token)
            continue
        
        # Check spelling only for words
        if token.lower() in spell:
            corrected_token = token  # Word is correct
        else:
            corrected_token = spell.correction(token.lower())
            if corrected_token:
                # Save the first letter's case
                if token[0].isupper():
                    corrected_token = corrected_token.capitalize()
            else:
                corrected_token = token  # –ï—Å–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        
        corrected_tokens.append(corrected_token)
    
    # Restore spaces between words and punctuation marks
    result = ""
    for i, token in enumerate(corrected_tokens):
        # Do not add space before punctuation marks
        if token in ',.!?:;)]}¬ª"' and i > 0:
            result += token
        # Do not add space after opening brackets, quotes, etc.
        elif i > 0 and corrected_tokens[i-1] in '([{¬´"':
            result += token
        # In other cases, add a space between tokens
        elif i > 0:
            result += " " + token
        else:
            result += token
    
    return result

def add_simple_punctuation(text):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª.
    –ù–µ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫.
    """
    if not text:
        return text
        
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –≥—Ä–∞–Ω–∏—Ü–∞–º
    sentences = re.split(r'(?<=[.!?]) +', text)
    result = []
    
    for sentence in sentences:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞–∫–æ–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if sentence and sentence[-1] in '.!?':
            result.append(sentence)
            continue
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ü–µ
        if re.search(r'\b(–∫—Ç–æ|—á—Ç–æ|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º|–∫–∞–∫|–∫–∞–∫–æ–π|–∫–∞–∫–∞—è|–∫–∞–∫–æ–µ|–∫–∞–∫–∏–µ|—Å–∫–æ–ª—å–∫–æ)\b', 
                    sentence.lower()):
            result.append(sentence + '?')
        elif re.search(r'\b(—É—Ä–∞|–≤–∞—É|–æ–≥–æ|–Ω–∏—á–µ–≥–æ —Å–µ–±–µ|–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ|–ø–æ—Ç—Ä—è—Å–∞—é—â–µ|–∫—Ä—É—Ç–æ|–∑–¥–æ—Ä–æ–≤–æ|—Å—É–ø–µ—Ä)\b', 
                      sentence.lower()):
            result.append(sentence + '!')
        else:
            result.append(sentence + '.')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–µ—Ä–µ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å–æ—é–∑–∞–º–∏
    text = ' '.join(result)
    text = re.sub(r'\s+(–∞|–Ω–æ|–æ–¥–Ω–∞–∫–æ|–∑–∞—Ç–æ|–∏–ª–∏|–ª–∏–±–æ|–≤–µ–¥—å|–ø–æ—Ç–æ–º—É —á—Ç–æ|–ø–æ—ç—Ç–æ–º—É|—Ç–∞–∫ –∫–∞–∫|–µ—Å–ª–∏|—á—Ç–æ–±—ã)\s+', 
                 r', \1 ', text)
    
    # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    text = re.sub(r'([.!?]\s*)([a-z–∞-—è])', lambda m: m.group(1) + m.group(2).upper(), text)
    
    # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if text and text[0].isalpha():
        text = text[0].upper() + text[1:]
        
    return text

def restore_punctuation_deeppavlov(text):
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ DeepPavlov.
    –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ—Å—Ç–æ–π –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π.
    """
    global deeppavlov_loaded, punctuation_model
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
    if not text:
        return text
    
    # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å DeepPavlov, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    if not deeppavlov_loaded:
        try:
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ DeepPavlov –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏...")
            from deeppavlov import build_model, configs
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
            punctuation_model = build_model("punctuation_restore", download=True)
            deeppavlov_loaded = True
            logger.info("–ú–æ–¥–µ–ª—å DeepPavlov —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ DeepPavlov: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é
            return add_simple_punctuation(text)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
    try:
        # DeepPavlov –æ–∂–∏–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        result = punctuation_model([text])
        if result and len(result) > 0:
            return result[0]
        else:
            return add_simple_punctuation(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ —Å DeepPavlov: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return add_simple_punctuation(text)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send greeting message when /start command is issued"""
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send help message when /help command is issued"""
    help_text = """
    ü§ñ How to use the bot:
    1. Simply record and send me a voice message.
    2. I will download it, process it, and send you the recognized text.
    
    ‚ö†Ô∏è *Currently, I best understand voice messages in Russian.*
    """
    await update.message.reply_markdown(help_text)

def convert_ogg_to_wav(ogg_file_path):
    """Converts an audio file from .ogg (Telegram) format to .wav (for SpeechRecognition)"""
    wav_file_path = ogg_file_path.replace(".ogg", ".wav")
    
    # Load .ogg file
    audio = AudioSegment.from_ogg(ogg_file_path)
    # Export to .wav with necessary parameters
    audio.export(wav_file_path, format="wav", parameters=["-ac", "1", "-ar", "16000"])
    
    return wav_file_path

def speech_to_text(audio_file_path):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç"""
    recognizer = sr.Recognizer()
    
    with sr.AudioFile(audio_file_path) as source:
        # Adjust for ambient noise and read the entire audio file
        recognizer.adjust_for_ambient_noise(source)
        audio_data = recognizer.record(source)
    
    try:
        # Use Google Web Speech API
        # Specify language: 'ru-RU' for Russian
        text = recognizer.recognize_google(audio_data, language='ru-RU')
        return text
    except sr.UnknownValueError:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ê—É–¥–∏–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤—ã–º."
    except sr.RequestError as e:
        return f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è; {e}"

async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # Check if message and voice message exist
    if not update.message or not update.message.voice:
        return
        
    # Get file information
    voice_file = await update.message.voice.get_file()
    user_id = update.message.from_user.id
    file_id = voice_file.file_id
    ogg_file_path = f"temp_voice_{user_id}_{file_id}.ogg"
    wav_file_path = None
    
    # Upload file to Telegram server
    await voice_file.download_to_drive(ogg_file_path)
    await update.message.reply_text("üéôÔ∏è Audio received! Processing...")
    
    try:
        # Convert .ogg to .wav
        wav_file_path = convert_ogg_to_wav(ogg_file_path)
        
        # Recognize speech
        recognized_text = speech_to_text(wav_file_path)
        
        # Correct spelling errors
        corrected_text = correct_spelling(recognized_text)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é DeepPavlov
        corrected_text = restore_punctuation_deeppavlov(corrected_text)
        
        # Generate unique ID for text
        text_id = f"text_{user_id}_{int(time.time())}"
        
        # Save text in dictionary
        recognized_texts[text_id] = corrected_text
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç" —Å –∫–æ—Ä–æ—Ç–∫–∏–º ID –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"copy:{text_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π
        await update.message.reply_text(
            f"üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{corrected_text}", 
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")
        await update.message.reply_text("üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(ogg_file_path):
            os.remove(ogg_file_path)
        if wav_file_path and os.path.exists(wav_file_path):
            os.remove(wav_file_path)

async def handle_channel_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    # Check if message and voice message exist
    if not update.channel_post or not update.channel_post.voice:
        return
    
    # Get channel information
    channel_id = update.channel_post.chat.id
    channel_title = update.channel_post.chat.title
    message_id = update.channel_post.message_id
    
    # Get file information
    voice_file = await update.channel_post.voice.get_file()
    file_id = voice_file.file_id
    ogg_file_path = f"temp_voice_channel_{channel_id}_{file_id}.ogg"
    wav_file_path = None
    
    # Log received message
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞  '{channel_title}' (ID: {channel_id})")
    
    try:
        # Download file
        await voice_file.download_to_drive(ogg_file_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º .ogg –≤ .wav
        wav_file_path = convert_ogg_to_wav(ogg_file_path)
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        recognized_text = speech_to_text(wav_file_path)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        corrected_text = correct_spelling(recognized_text)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é DeepPavlov
        corrected_text = restore_punctuation_deeppavlov(corrected_text)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        text_id = f"text_{channel_id}_{int(time.time())}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
        recognized_texts[text_id] = corrected_text
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç" —Å –∫–æ—Ä–æ—Ç–∫–∏–º ID –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"copy:{text_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await context.bot.send_message(
            chat_id=channel_id,
            text=f"üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{corrected_text}",
            reply_to_message_id=message_id,
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
        await context.bot.send_message(
            chat_id=channel_id,
            text="üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.",
            reply_to_message_id=message_id
        )
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(ogg_file_path):
            os.remove(ogg_file_path)
        if wav_file_path and os.path.exists(wav_file_path):
            os.remove(wav_file_path)

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–æ–±—â–∞—è —á—Ç–æ –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ"""
    await update.message.reply_text("üé§ –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def handle_other_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text("üé§ –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def handle_copy_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç" """
    query = update.callback_query
    await query.answer()
    text_id = query.data.split(":")[1]
    text = recognized_texts.get(text_id)
    if text:
        await query.edit_message_text(text=f"–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞: {text}")
    else:
        await query.edit_message_text(text="–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

deeppavlov_loaded = False
punctuation_model = None

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.getLogger('telegram').setLevel(logging.DEBUG)
    logging.getLogger('httpx').setLevel(logging.DEBUG)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ –æ–±—ã—á–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≥–æ–ª–æ—Å–æ–≤—ã—Ö)
    channel_handler = MessageHandler(
        filters.ChatType.CHANNEL & filters.VOICE, 
        handle_channel_voice_message
    )
    application.add_handler(channel_handler)
    logger.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(~filters.VOICE & ~filters.COMMAND, handle_other_messages))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"
    application.add_handler(CallbackQueryHandler(handle_copy_text, pattern="^copy:"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    async def log_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞: {update.update_id}")
        if update.channel_post:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: {update.channel_post.chat.title}")
            if update.channel_post.voice:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    application.add_handler(MessageHandler(filters.ALL, log_update), group=999)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    main()
